{"abstract":[{"text":"Transforms the receiver parser into one that can parse streams of input.","type":"text"}],"kind":"symbol","identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip\/stream","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/parsing\/skip\/stream"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip\/Parser-Implementations"]]},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"stream"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Parsing7ParsersO","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Parsing7ParsersO6StreamV","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Stream","kind":"typeIdentifier","text":"Stream"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"> { "},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}]}]},{"content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"For example, the following parser can parse an integer followed by a newline from a collection","type":"text"},{"text":" ","type":"text"},{"text":"of UTF8 bytes:","type":"text"}]},{"type":"codeListing","code":["Parsers.Integer<ArraySlice<UInt8>, Int>()","  .skip(StartsWith(\"\\n\".utf8))"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This parser can be transformed into one that processes an incoming stream of UTF8 bytes:","type":"text"}]},{"type":"codeListing","code":["let newlineSeparatedIntegers = Parsers.Integer<ArraySlice<UInt8>, Int>()","  .skip(StartsWith(\"\\n\".utf8))","  .stream"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"And then it can be used on a stream, such as values coming from standard in:","type":"text"}]},{"type":"codeListing","code":["var stdin = AnyIterator {","  readLine().map { ArraySlice($0.utf8) }","}","","newlineSeparatedIntegers","  .parse(&stdin)"],"syntax":"swift"}],"kind":"content"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"roleHeading":"Instance Property","extendedModule":"Parsing","role":"symbol","symbolKind":"property","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Input","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"modules":[{"name":"Parsing"}],"externalID":"s:7Parsing6ParserPAASm5InputRpzrlE6streamAA7ParsersO6StreamVy_xGvp::SYNTHESIZED::s:7Parsing4SkipV","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"stream","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"text":"Stream","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO6StreamV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"stream"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","kind":"symbol","title":"Parsing","url":"\/documentation\/parsing","role":"collection","type":"topic","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/Skip":{"type":"topic","abstract":[{"text":"A parser that discards the output of another parser.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Skip"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip","title":"Skip","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Skip"}],"url":"\/documentation\/parsing\/skip"},"doc://co.pointfree.Parsing/documentation/Parsing/Skip/Parser-Implementations":{"abstract":[],"kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip\/Parser-Implementations","type":"topic","title":"Parser Implementations","role":"collectionGroup","url":"\/documentation\/parsing\/skip\/parser-implementations"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"title":"Parsers","role":"symbol","navigatorTitle":[{"text":"Parsers","kind":"identifier"}],"url":"\/documentation\/parsing\/parsers","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","abstract":[{"text":"A namespace for types that serve as parsers.","type":"text"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"identifier"}],"kind":"symbol","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Stream":{"type":"topic","abstract":[{"type":"text","text":"A parser that can parse streams of input."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Stream"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Stream","title":"Parsers.Stream","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Stream"}],"url":"\/documentation\/parsing\/parsers\/stream"},"doc://co.pointfree.Parsing/documentation/Parsing/Skip/stream":{"abstract":[{"text":"Transforms the receiver parser into one that can parse streams of input.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip\/stream","type":"topic","title":"stream","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","url":"\/documentation\/parsing\/skip\/stream","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"stream"},{"text":": ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO6StreamV","text":"Stream"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}]}}}