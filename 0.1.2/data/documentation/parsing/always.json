{"relationshipsSections":[{"kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"],"type":"conformsTo"}],"variants":[{"paths":["\/documentation\/parsing\/always"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Always","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Input","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Output","kind":"genericParameter"},{"text":">","kind":"text"}]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"type":"codeListing","code":["var input = \"Hello\"[...]","let output = Always(1).parse(&hello)","precondition(output == 1)","precondition(input == \"Hello\")"],"syntax":null}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always"},"sections":[],"abstract":[{"text":"A parser that always succeeds by returning the provided value, but does not consume any of its","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"metadata":{"modules":[{"name":"Parsing"}],"role":"symbol","title":"Always","roleHeading":"Structure","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Always","kind":"identifier"}],"externalID":"s:7Parsing6AlwaysV","navigatorTitle":[{"text":"Always","kind":"identifier"}],"symbolKind":"struct"},"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always\/init(_:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always\/output"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always\/map(_:)-9q3t1","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always\/parse(_:)"]},{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always\/Parser-Implementations"]}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Always/parse(_:)":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/parsing\/always\/parse(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"title":"parse(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always\/parse(_:)","abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Always/Parser-Implementations":{"kind":"article","title":"Parser Implementations","role":"collectionGroup","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always\/Parser-Implementations","url":"\/documentation\/parsing\/always\/parser-implementations","type":"topic","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/Always/output":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/parsing\/always\/output","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"output","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"title":"output","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always\/output","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/Always":{"navigatorTitle":[{"kind":"identifier","text":"Always"}],"kind":"symbol","title":"Always","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always","url":"\/documentation\/parsing\/always","type":"topic","abstract":[{"type":"text","text":"A parser that always succeeds by returning the provided value, but does not consume any of its"},{"type":"text","text":" "},{"type":"text","text":"input."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Always"}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"role":"collection","title":"Parsing","kind":"symbol","abstract":[],"type":"topic","url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/Always/init(_:)":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/parsing\/always\/init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"init(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always\/init(_:)","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"url":"\/documentation\/parsing\/parser","abstract":[{"text":"Declares a type that can parse an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value into an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value.","type":"text"}],"title":"Parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Always/map(_:)-9q3t1":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always\/map(_:)-9q3t1","title":"map(_:)","url":"\/documentation\/parsing\/always\/map(_:)-9q3t1","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"map"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewOutput"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7Parsing6AlwaysV","kind":"typeIdentifier","text":"Always"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":">"}],"type":"topic","role":"symbol","abstract":[],"kind":"symbol"}}}