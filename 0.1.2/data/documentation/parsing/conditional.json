{"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"]]},"topicSections":[{"title":"Enumeration Cases","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional\/first(_:)","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional\/second(_:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional\/parse(_:)"]},{"generated":true,"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional\/Parser-Implementations"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional"},"relationshipsSections":[{"type":"conformsTo","kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/conditional"]}],"abstract":[{"text":"A parser that can parse output from two types of parsers.","type":"text"}],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conditional"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"First"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Second"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Parser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","preciseIdentifier":"s:7Parsing6ParserP"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Second"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Parser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","preciseIdentifier":"s:7Parsing6ParserP"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Second"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Second"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"inlineContent":[{"text":"This parser is useful for situations where you want to run one of two different parsers based on","type":"text"},{"text":" ","type":"text"},{"text":"a condition, which typically would force you to perform ","type":"text"},{"type":"codeVoice","code":".eraseToAnyParser()"},{"text":" and incur a","type":"text"},{"text":" ","type":"text"},{"text":"performance penalty.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, you can use this parser in a "},{"code":"flatMap","type":"codeVoice"},{"type":"text","text":" operation to use the parsed output to"},{"type":"text","text":" "},{"type":"text","text":"determine what parser to run next:"}],"type":"paragraph"},{"code":["versionParser.flatMap { version in","  version == \"2.0\"","    ? Conditional.first(V2Parser())","    : Conditional.second(LegacyParser())","}"],"type":"codeListing","syntax":null}]}],"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conditional"}],"externalID":"s:7Parsing11ConditionalO","roleHeading":"Enumeration","symbolKind":"enum","modules":[{"name":"Parsing"}],"title":"Conditional","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Conditional"}]},"kind":"symbol","references":{"doc://co.pointfree.Parsing/documentation/Parsing/Conditional/first(_:)":{"type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional\/first(_:)","abstract":[],"fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"first"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":")"}],"title":"Conditional.first(_:)","kind":"symbol","url":"\/documentation\/parsing\/conditional\/first(_:)","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Conditional/Parser-Implementations":{"title":"Parser Implementations","role":"collectionGroup","url":"\/documentation\/parsing\/conditional\/parser-implementations","kind":"article","type":"topic","abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional\/Parser-Implementations"},"doc://co.pointfree.Parsing/documentation/Parsing/Conditional/parse(_:)":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional\/parse(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"First"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured."}],"kind":"symbol","type":"topic","url":"\/documentation\/parsing\/conditional\/parse(_:)","title":"parse(_:)","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Conditional":{"title":"Conditional","navigatorTitle":[{"text":"Conditional","kind":"identifier"}],"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conditional","kind":"identifier"}],"url":"\/documentation\/parsing\/conditional","kind":"symbol","type":"topic","abstract":[{"text":"A parser that can parse output from two types of parsers.","type":"text"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional"},"doc://co.pointfree.Parsing/documentation/Parsing/Conditional/second(_:)":{"url":"\/documentation\/parsing\/conditional\/second(_:)","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"second"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Second"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional\/second(_:)","role":"symbol","title":"Conditional.second(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing":{"role":"collection","title":"Parsing","kind":"symbol","abstract":[],"type":"topic","url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"url":"\/documentation\/parsing\/parser","abstract":[{"text":"Declares a type that can parse an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value into an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value.","type":"text"}],"title":"Parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol"}}}