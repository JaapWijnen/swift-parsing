{"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"],"kind":"relationships","type":"conformsTo","title":"Conforms To"}],"metadata":{"externalID":"s:7Parsing9AnyParserV","modules":[{"name":"Parsing"}],"role":"symbol","navigatorTitle":[{"text":"AnyParser","kind":"identifier"}],"symbolKind":"struct","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyParser","kind":"identifier"}],"title":"AnyParser","roleHeading":"Structure"},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyParser","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Input","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Output","kind":"genericParameter"},{"text":">","kind":"text"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"inlineContent":[{"text":"This parser forwards its ","type":"text"},{"type":"codeVoice","code":"parse()"},{"text":" method to an arbitrary underlying parser having the same","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Input"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Output"},{"text":" types, hiding the specifics of the underlying ","type":"text"},{"type":"codeVoice","code":"Parser"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"AnyParser"},{"type":"text","text":" to wrap a publisher whose type has details you donâ€™t want to expose across API"},{"type":"text","text":" "},{"type":"text","text":"boundaries, such as different modules. When you use type erasure this way, you can change the"},{"type":"text","text":" "},{"type":"text","text":"underlying parser over time without affecting existing clients."}],"type":"paragraph"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/anyparser"]}],"abstract":[{"type":"text","text":"A type-erased parser of "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" from "},{"code":"Input","type":"codeVoice"},{"type":"text","text":"."}],"sections":[],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","interfaceLanguage":"swift"},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser\/init(_:)-47tyc","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser\/init(_:)-71nto"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser\/eraseToAnyParser()","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser\/parse(_:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser\/Parser-Implementations"],"generated":true,"title":"Default Implementations"}],"kind":"symbol","references":{"doc://co.pointfree.Parsing/documentation/Parsing/AnyParser/init(_:)-47tyc":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser\/init(_:)-47tyc","title":"init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"((","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":"?)","kind":"text"}],"url":"\/documentation\/parsing\/anyparser\/init(_:)-47tyc","abstract":[{"type":"text","text":"Creates a parser that wraps the given closure in its "},{"type":"codeVoice","code":"parse()"},{"text":" method.","type":"text"}],"type":"topic","kind":"symbol","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"url":"\/documentation\/parsing\/parser","abstract":[{"text":"Declares a type that can parse an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value into an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value.","type":"text"}],"title":"Parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParser/parse(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"title":"parse(_:)","role":"symbol","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured."}],"url":"\/documentation\/parsing\/anyparser\/parse(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser\/parse(_:)","type":"topic","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParser/eraseToAnyParser()":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"eraseToAnyParser"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing9AnyParserV","text":"AnyParser"},{"text":"<","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"eraseToAnyParser()","role":"symbol","abstract":[],"url":"\/documentation\/parsing\/anyparser\/erasetoanyparser()","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser\/eraseToAnyParser()","type":"topic","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParser/init(_:)-71nto":{"title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"P"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":")"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser\/init(_:)-71nto","url":"\/documentation\/parsing\/anyparser\/init(_:)-71nto","type":"topic","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Creates a type-erasing parser to wrap the given parser."}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"role":"collection","title":"Parsing","kind":"symbol","abstract":[],"type":"topic","url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParser":{"role":"symbol","title":"AnyParser","abstract":[{"text":"A type-erased parser of ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" from ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"AnyParser"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyParser"}],"url":"\/documentation\/parsing\/anyparser","type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParser/Parser-Implementations":{"role":"collectionGroup","title":"Parser Implementations","abstract":[],"url":"\/documentation\/parsing\/anyparser\/parser-implementations","type":"topic","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser\/Parser-Implementations"}}}