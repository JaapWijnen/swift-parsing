{"kind":"symbol","hierarchy":{"paths":[[]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"topicSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"],"title":"Articles"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CountingRange","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection"],"title":"Protocols"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParserPrinter","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParsePrint"],"title":"Structures"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional"],"title":"Type Aliases"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers"],"title":"Enumerations"}],"primaryContentSections":[{"content":[{"anchor":"Additional-Resources","level":2,"text":"Additional Resources","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","type":"reference"}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/www.pointfree.co\/collections\/parsing"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"text":"Overview","anchor":"Overview","type":"heading"},{"inlineContent":[{"text":"Parsing with this library is performed by listing out many small parsers that describe how to","type":"text"},{"text":" ","type":"text"},{"text":"incrementally consume small bits from the beginning of an input string. For example, suppose you","type":"text"},{"text":" ","type":"text"},{"text":"have a string that holds some user data that you want to parse into an array of ","type":"text"},{"type":"codeVoice","code":"User"},{"text":"s:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["var input = \"\"\"","1,Blob,true","2,Blob Jr.,false","3,Blob Sr.,true","\"\"\"","","struct User {","  var id: Int","  var name: String","  var isAdmin: Bool","}"],"type":"codeListing"},{"inlineContent":[{"text":"A parser can be constructed for transforming the input string into an array of users in succinct","type":"text"},{"text":" ","type":"text"},{"text":"and fluent API:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let user = Parse(User.init) {","  Int.parser()","  \",\"","  Prefix { $0 != \",\" }.map(String.init)","  \",\"","  Bool.parser()","}","","let users = Many {","  user","} separator: {","  \"\\n\"","} terminator: {","  End()","}","","try users.parse(input)  \/\/ [User(id: 1, name: \"Blob\", isAdmin: true), ...]"],"type":"codeListing"},{"inlineContent":[{"text":"This says that to parse a user we:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Parse and consume an integer from the beginning of the input","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"then a comma","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"then everything up to the next comma"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"then another comma"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"and finally a boolean."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"And to parse an entire array of users we:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Run the ","type":"text"},{"type":"codeVoice","code":"user"},{"text":" parser many times","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"between each invocation of "},{"type":"codeVoice","code":"user"},{"type":"text","text":" we run the separator parser to consume a newline"}]}]},{"content":[{"inlineContent":[{"text":"and once the ","type":"text"},{"code":"user","type":"codeVoice"},{"text":" and separator parsers have consumed all they can we run the terminator","type":"text"},{"text":" ","type":"text"},{"text":"parser to verify there is no more input to consume.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Further, if the input is malformed, like say we mistyped one of the booleans, then the parser emits"},{"type":"text","text":" "},{"type":"text","text":"an error that describes exactly what went wrong:"}],"type":"paragraph"},{"syntax":"swift","code":["var input = \"\"\"","1,Blob,true","2,Blob Jr.,false","3,Blob Sr.,tru","\"\"\"","","try users.parse(input)","","\/\/ error: unexpected input","\/\/  --> input:3:11","\/\/ 3 | 3,Blob Jr,tru","\/\/   |           ^ expected \"true\" or \"false\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"With a few small changes we can also turn this parser into a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"}],"type":"paragraph"},{"inlineContent":[{"text":"Thatâ€™s the basics of parsing a simple string format, but there are a lot more operators and tricks","type":"text"},{"text":" ","type":"text"},{"text":"to learn in order to performantly parse larger inputs.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"metadata":{"role":"collection","externalID":"Parsing","modules":[{"name":"Parsing"}],"roleHeading":"Framework","symbolKind":"module","title":"Parsing"},"abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","interfaceLanguage":"swift"},"seeAlsoSections":[{"abstract":[{"text":"The collection of videos from ","type":"text"},{"isActive":true,"identifier":"https:\/\/www.pointfree.co","type":"reference"},{"text":" that dive deep into the","type":"text"},{"text":" ","type":"text"},{"text":"development of the Parsing library.","type":"text"}],"identifiers":["https:\/\/www.pointfree.co\/collections\/parsing"],"title":"Related Documentation"}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"url":"\/documentation\/parsing\/parser","kind":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"title":"Parser","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"title":"Parsers","navigatorTitle":[{"text":"Parsers","kind":"identifier"}],"abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","url":"\/documentation\/parsing\/parsers","type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","role":"symbol","url":"\/documentation\/parsing\/conversion","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversion","kind":"identifier"}],"title":"Conversion","navigatorTitle":[{"text":"Conversion","kind":"identifier"}],"kind":"symbol","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/Backtracking":{"url":"\/documentation\/parsing\/backtracking","abstract":[{"text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when","type":"text"},{"text":" ","type":"text"},{"text":"unnecessary.","type":"text"}],"title":"Backtracking","role":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking","type":"topic","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/ErrorMessages":{"url":"\/documentation\/parsing\/errormessages","abstract":[{"text":"Learn how the library reports parsing errors and how to integrate your own custom error messages","type":"text"},{"type":"text","text":" "},{"type":"text","text":"into parsers."}],"title":"Error Messages","role":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","type":"topic","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/ParsePrint":{"title":"ParsePrint","url":"\/documentation\/parsing\/parseprint","navigatorTitle":[{"kind":"identifier","text":"ParsePrint"}],"abstract":[{"type":"text","text":"An entry to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder"},{"type":"text","text":" syntax that requires the builder to be a printer."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParsePrint"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParsePrint","kind":"symbol","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParserPrinter":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParserPrinter","role":"symbol","url":"\/documentation\/parsing\/anyparserprinter","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyParserPrinter","kind":"identifier"}],"title":"AnyParserPrinter","navigatorTitle":[{"text":"AnyParserPrinter","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A type-erased parser-printer of "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" from "},{"type":"codeVoice","code":"Input"},{"type":"text","text":"."}]},"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"url":"\/documentation\/parsing\/stringabstractions","title":"String Abstractions","type":"topic","role":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","kind":"article","abstract":[{"text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to","type":"text"},{"text":" ","type":"text"},{"text":"trade performance for correctness where needed.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Design":{"url":"\/documentation\/parsing\/design","abstract":[{"text":"Learn how the library is designed, including its use of protocols, result builders and operators.","type":"text"}],"title":"Design","role":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","type":"topic","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","navigatorTitle":[{"text":"AnyConversion","kind":"identifier"}],"type":"topic","role":"symbol","kind":"symbol","abstract":[{"text":"A type-erased ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","type":"reference"},{"text":".","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyConversion","kind":"identifier"}],"url":"\/documentation\/parsing\/anyconversion","title":"AnyConversion"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions":{"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","kind":"symbol","title":"Conversions","url":"\/documentation\/parsing\/conversions","abstract":[{"text":"A namespace for types that serve as conversions.","type":"text"}],"navigatorTitle":[{"text":"Conversions","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversions","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","abstract":[],"title":"ParserPrinter","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"url":"\/documentation\/parsing\/parserprinter","role":"symbol","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/GettingStarted":{"url":"\/documentation\/parsing\/gettingstarted","abstract":[{"text":"Learn how to integrate Parsing into your project and write your first parser.","type":"text"}],"title":"Getting Started","role":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","type":"topic","kind":"article"},"https://github.com/pointfreeco/swift-parsing":{"url":"https:\/\/github.com\/pointfreeco\/swift-parsing","titleInlineContent":[{"type":"text","text":"GitHub Repo"}],"title":"GitHub Repo","type":"link","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing"},"doc://co.pointfree.Parsing/documentation/Parsing":{"abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"role":"collection","title":"Parsing","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","url":"\/documentation\/parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/PrependableCollection":{"abstract":[],"url":"\/documentation\/parsing\/prependablecollection","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrependableCollection","title":"PrependableCollection","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrependableCollection"}],"role":"symbol","navigatorTitle":[{"text":"PrependableCollection","kind":"identifier"}],"kind":"symbol","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Conditional":{"abstract":[],"title":"Conditional","url":"\/documentation\/parsing\/conditional","role":"symbol","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Conditional"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conditional"}],"deprecated":true},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder":{"title":"ParserBuilder","kind":"symbol","abstract":[{"text":"A custom parameter attribute that constructs parsers from closures. The constructed parser","type":"text"},{"text":" ","type":"text"},{"text":"runs a number of parsers, one after the other, and accumulates their outputs.","type":"text"}],"url":"\/documentation\/parsing\/parserbuilder","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserBuilder","kind":"identifier"}],"navigatorTitle":[{"text":"ParserBuilder","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/CountingRange":{"role":"symbol","title":"CountingRange","abstract":[],"navigatorTitle":[{"text":"CountingRange","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CountingRange","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CountingRange","kind":"identifier"}],"url":"\/documentation\/parsing\/countingrange"},"https://www.pointfree.co/collections/parsing":{"url":"https:\/\/www.pointfree.co\/collections\/parsing","titleInlineContent":[{"type":"text","text":"Point-Free Videos"}],"title":"Point-Free Videos","type":"link","identifier":"https:\/\/www.pointfree.co\/collections\/parsing"},"https://github.com/pointfreeco/swift-parsing/discussions":{"url":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","titleInlineContent":[{"type":"text","text":"Discussions"}],"title":"Discussions","type":"link","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions"}}}