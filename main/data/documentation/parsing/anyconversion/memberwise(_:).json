{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/anyconversion\/memberwise(_:)"]}],"abstract":[{"type":"text","text":"A conversion from a tuple of values into a struct and a struct into a tuple of values, using a"},{"type":"text","text":" "},{"type":"text","text":"memberwise initializer."}],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"memberwise","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Struct","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Struct","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"extendedModule":"Parsing","roleHeading":"Type Method","role":"symbol","title":"memberwise(_:)","symbolKind":"method","externalID":"s:7Parsing10ConversionPAAE10memberwiseyAA11ConversionsO10MemberwiseVy_qd__qd_0_Gqd_0_qd__cAIRszr0_lFZ::SYNTHESIZED::s:7Parsing13AnyConversionV","modules":[{"name":"Parsing"}]},"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/memberwise(_:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/Conversion-Implementations"]]},"sections":[],"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"memberwise","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Struct","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"initializer","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Struct","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","preciseIdentifier":"s:7Parsing11ConversionsO","text":"Conversions","kind":"typeIdentifier"},{"text":".","kind":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Memberwise","preciseIdentifier":"s:7Parsing11ConversionsO10MemberwiseV","text":"Memberwise","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Struct","kind":"typeIdentifier"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"initializer","content":[{"type":"paragraph","inlineContent":[{"text":"A memberwise initializer where ","type":"text"},{"code":"Values","type":"codeVoice"},{"text":" directly maps to the memory","type":"text"},{"text":" ","type":"text"},{"text":"layout of ","type":"text"},{"code":"Root","type":"codeVoice"},{"text":", for example the internal, default initializer that is automatically","type":"text"},{"text":" ","type":"text"},{"text":"synthesized for structs.","type":"text"}]}]}]},{"content":[{"level":2,"anchor":"return-value","text":"Return Value","type":"heading"},{"inlineContent":[{"text":"A conversion that can embed a tuple of values into a struct, and destructure a","type":"text"},{"text":" ","type":"text"},{"text":"struct back into a tuple of values.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Useful for transforming the output of a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"},{"type":"text","text":" into a struct."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, given a simple "},{"code":"Coordinate","type":"codeVoice"},{"type":"text","text":" struct, we can build a parser-printer using"},{"type":"text","text":" "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/memberwise(_:)","isActive":true,"type":"reference"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["struct Coordinate {","  var x: Double","  var y: Double","}","","let coord = ParsePrint(.memberwise(Coordinate.init(x:y:))) {","  \"(\"","  Double.parser()","  \",\"","  Double.parser()","  \")\"","}","","try coord.parse(\"(1,-2)\")           \/\/ Coordinate(x: 1.0, y: -2.0)","coord.print(.init(x: -5, y: 10))  \/\/ \"(-5.0,10.0)\""]},{"type":"paragraph","inlineContent":[{"text":"To transform the output of a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"},{"text":" into an enum, see ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/case(_:)-4j2n7"},{"text":".","type":"text"}]},{"type":"heading","level":2,"text":"Careful usage","anchor":"Careful-usage"},{"type":"paragraph","inlineContent":[{"text":"This conversion works by using the memberwise initializer you supply to ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/memberwise(_:)","type":"reference","isActive":true},{"text":" in","type":"text"},{"text":" ","type":"text"},{"text":"order to turn tuples into a struct, and it uses ","type":"text"},{"type":"codeVoice","code":"unsafeBitcast"},{"text":" to turn the struct back into","type":"text"},{"text":" ","type":"text"},{"text":"a tuple. Because of this, it is ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"text":" valid to use ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/memberwise(_:)","type":"reference","isActive":true},{"text":" with anything other than","type":"text"},{"text":" ","type":"text"},{"text":"the default synthesized memberwise initializer that structs are given for free by the compiler","type":"text"},{"text":" ","type":"text"},{"text":"as that function most correctly maps the data inside a struct to its tuple representation,","type":"text"},{"text":" ","type":"text"},{"text":"even enforcing the order of the fields.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you alter the initializer in any way you run the risk of introducing subtle bugs into"},{"type":"text","text":" "},{"type":"text","text":"your parser-printer and potentially causing crashes."}]},{"type":"paragraph","inlineContent":[{"text":"For example, suppose we provided an alternative initializer to ","type":"text"},{"type":"codeVoice","code":"Coordinate"},{"text":" above that","type":"text"},{"text":" ","type":"text"},{"text":"allowed you to create a coordinate from a radius and angle measured in degrees:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["extension Coordinate {","  init(radius: Double, angle: Double) {","    self.x = radius * cos(angle * Double.pi \/ 180)","    self.y = radius * sin(angle * Double.pi \/ 180)","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"This may seem innocent enough, but it is ","type":"text"},{"inlineContent":[{"text":"not","type":"text"}],"type":"emphasis"},{"text":" safe to use this initializer with","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/memberwise(_:)","type":"reference","isActive":true},{"text":". The following parser-printer will correctly parse a radius and angle into","type":"text"},{"text":" ","type":"text"},{"text":"an x\/y coordinate:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let coord = ParserPrint(.memberwise(Coordinate.init(radius:angle:))) {","  Double.parser()","  \" @ \"","  Double.parser()","  \"°\"","}","","try coord.parse(\"1 @ 90°\")  \/\/ (x: 0, y: 1)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, printing a coordinate will "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" convert it back into a radius and angle, and"},{"type":"text","text":" "},{"type":"text","text":"instead will erroneously use (0, 1) as the radius and angle:"}]},{"syntax":"swift","type":"codeListing","code":["try coord.print(.init(x: 0, y: 1))  \/\/ \"0 @ 1°\""]},{"type":"paragraph","inlineContent":[{"text":"This means this parser-printer does not round trip (see ","type":"text"},{"text":"doc:Roundtripping","type":"text"},{"text":"), ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"i.e.","type":"text"}]},{"text":" if we","type":"text"},{"text":" ","type":"text"},{"text":"parse and input and then print that output we do not get back the original input we started","type":"text"},{"text":" ","type":"text"},{"text":"with:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["try coord.print(try coord.parse(\"1 @ 90°\")) == \"1 @ 90°\"  \/\/ ❌"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, it is possible to provide a custom initializer for a type that either re-orders the"},{"type":"text","text":" "},{"type":"text","text":"fields or add\/removes fields, both of which will cause the underlying "},{"type":"codeVoice","code":"unsafeBitCast"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"crash. For example, we could have a "},{"type":"codeVoice","code":"User"},{"type":"text","text":" struct that holds onto a string for the bio and an"},{"type":"text","text":" "},{"type":"text","text":"integer for the id, and provide a custom initializer so that the id is provided first:"}]},{"syntax":"swift","type":"codeListing","code":["struct User {","  let bio: String","  let id: Int","  init(id: Int, bio: String) {","    self.bio = bio","    self.id = id","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"However, using this initializer with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/memberwise(_:)","type":"reference"},{"text":" will cause printing to crash because","type":"text"},{"text":" ","type":"text"},{"text":"it will try to bitcast a ","type":"text"},{"code":"(String, Int)","type":"codeVoice"},{"text":" struct into a ","type":"text"},{"code":"(Int, String)","type":"codeVoice"},{"text":" tuple:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let user = ParsePrint(.memberwise(User.init(id:bio:))) {","  Int.parser()","  \",\"","  Rest()","}","","try user.print(.init(id: 42, bio: \"Hello world!\"))  \/\/ ❌"]}],"kind":"content"}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion/Conversion-Implementations":{"type":"topic","abstract":[],"url":"\/documentation\/parsing\/anyconversion\/conversion-implementations","title":"Conversion Implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/Conversion-Implementations","role":"collectionGroup","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","role":"symbol","url":"\/documentation\/parsing\/conversion","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversion","kind":"identifier"}],"title":"Conversion","navigatorTitle":[{"text":"Conversion","kind":"identifier"}],"kind":"symbol","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions":{"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","kind":"symbol","title":"Conversions","url":"\/documentation\/parsing\/conversions","abstract":[{"text":"A namespace for types that serve as conversions.","type":"text"}],"navigatorTitle":[{"text":"Conversions","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversions","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion","navigatorTitle":[{"text":"AnyConversion","kind":"identifier"}],"type":"topic","role":"symbol","kind":"symbol","abstract":[{"text":"A type-erased ","type":"text"},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion","type":"reference"},{"text":".","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyConversion","kind":"identifier"}],"url":"\/documentation\/parsing\/anyconversion","title":"AnyConversion"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/Memberwise":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Memberwise","abstract":[],"title":"Conversions.Memberwise","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Memberwise","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"Memberwise","kind":"identifier"}],"url":"\/documentation\/parsing\/conversions\/memberwise","role":"symbol","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","abstract":[],"title":"ParserPrinter","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"url":"\/documentation\/parsing\/parserprinter","role":"symbol","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"role":"collection","title":"Parsing","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","url":"\/documentation\/parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyConversion/memberwise(_:)":{"type":"topic","abstract":[{"type":"text","text":"A conversion from a tuple of values into a struct and a struct into a tuple of values, using a"},{"type":"text","text":" "},{"type":"text","text":"memberwise initializer."}],"url":"\/documentation\/parsing\/anyconversion\/memberwise(_:)","title":"memberwise(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyConversion\/memberwise(_:)","role":"symbol","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"memberwise","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Struct","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Struct","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion/case(_:)-4j2n7":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/case(_:)-4j2n7","abstract":[{"text":"Converts the associated values of an enum case into the case, and an enum case into its","type":"text"},{"text":" ","type":"text"},{"text":"associated values.","type":"text"}],"title":"case(_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`case`","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Enum","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Enum","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"type":"topic","url":"\/documentation\/parsing\/conversion\/case(_:)-4j2n7","role":"symbol","kind":"symbol"}}}