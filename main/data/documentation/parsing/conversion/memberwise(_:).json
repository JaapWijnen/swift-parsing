{"seeAlsoSections":[{"generated":true,"title":"Common conversions","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/case(_:)-4j2n7","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/string-swift.type.property-3u2b5","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/string-swift.type.property-9owth","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/int-swift.type.property","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/double-swift.type.property","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/json(_:decoder:encoder:)-swift.type.method","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/representing(_:)-swift.type.method","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/lossless(_:)-swift.type.method"]}],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/memberwise(_:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/conversion\/memberwise(_:)"]}],"sections":[],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"memberwise"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Values"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Struct"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"initializer"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Struct"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":" == "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","preciseIdentifier":"s:7Parsing11ConversionsO","kind":"typeIdentifier","text":"Conversions"},{"kind":"text","text":"."},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Memberwise","preciseIdentifier":"s:7Parsing11ConversionsO10MemberwiseV","kind":"typeIdentifier","text":"Memberwise"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Struct"},{"kind":"text","text":">"}],"platforms":["Linux"]}]},{"parameters":[{"name":"initializer","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A memberwise initializer where "},{"type":"codeVoice","code":"Values"},{"type":"text","text":" directly maps to the memory"},{"type":"text","text":" "},{"type":"text","text":"layout of "},{"type":"codeVoice","code":"Root"},{"type":"text","text":", for example the internal, default initializer that is automatically"},{"type":"text","text":" "},{"type":"text","text":"synthesized for structs."}]}]}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","text":"Return Value","anchor":"return-value","level":2},{"type":"paragraph","inlineContent":[{"text":"A conversion that can embed a tuple of values into a struct, and destructure a","type":"text"},{"text":" ","type":"text"},{"text":"struct back into a tuple of values.","type":"text"}]}]},{"kind":"content","content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"Useful for transforming the output of a ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","type":"reference","isActive":true},{"text":" into a struct.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, given a simple "},{"type":"codeVoice","code":"Coordinate"},{"type":"text","text":" struct, we can build a parser-printer using"},{"type":"text","text":" "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/memberwise(_:)","type":"reference","isActive":true},{"type":"text","text":":"}]},{"code":["struct Coordinate {","  var x: Double","  var y: Double","}","","let coord = ParsePrint(.memberwise(Coordinate.init(x:y:))) {","  \"(\"","  Double.parser()","  \",\"","  Double.parser()","  \")\"","}","","try coord.parse(\"(1,-2)\")           \/\/ Coordinate(x: 1.0, y: -2.0)","coord.print(.init(x: -5, y: 10))  \/\/ \"(-5.0,10.0)\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To transform the output of a "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","type":"reference","isActive":true},{"type":"text","text":" into an enum, see "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/case(_:)-4j2n7","type":"reference","isActive":true},{"type":"text","text":"."}]},{"anchor":"Careful-usage","type":"heading","level":2,"text":"Careful usage"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This conversion works by using the memberwise initializer you supply to "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/memberwise(_:)","type":"reference","isActive":true},{"type":"text","text":" in"},{"type":"text","text":" "},{"type":"text","text":"order to turn tuples into a struct, and it uses "},{"code":"unsafeBitcast","type":"codeVoice"},{"type":"text","text":" to turn the struct back into"},{"type":"text","text":" "},{"type":"text","text":"a tuple. Because of this, it is "},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"type":"text","text":" valid to use "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/memberwise(_:)","type":"reference","isActive":true},{"type":"text","text":" with anything other than"},{"type":"text","text":" "},{"type":"text","text":"the default synthesized memberwise initializer that structs are given for free by the compiler"},{"type":"text","text":" "},{"type":"text","text":"as that function most correctly maps the data inside a struct to its tuple representation,"},{"type":"text","text":" "},{"type":"text","text":"even enforcing the order of the fields."}]},{"type":"paragraph","inlineContent":[{"text":"If you alter the initializer in any way you run the risk of introducing subtle bugs into","type":"text"},{"text":" ","type":"text"},{"text":"your parser-printer and potentially causing crashes.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For example, suppose we provided an alternative initializer to ","type":"text"},{"code":"Coordinate","type":"codeVoice"},{"text":" above that","type":"text"},{"text":" ","type":"text"},{"text":"allowed you to create a coordinate from a radius and angle measured in degrees:","type":"text"}]},{"code":["extension Coordinate {","  init(radius: Double, angle: Double) {","    self.x = radius * cos(angle * Double.pi \/ 180)","    self.y = radius * sin(angle * Double.pi \/ 180)","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This may seem innocent enough, but it is "},{"inlineContent":[{"text":"not","type":"text"}],"type":"emphasis"},{"type":"text","text":" safe to use this initializer with"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/memberwise(_:)"},{"type":"text","text":". The following parser-printer will correctly parse a radius and angle into"},{"type":"text","text":" "},{"type":"text","text":"an x\/y coordinate:"}]},{"code":["let coord = ParserPrint(.memberwise(Coordinate.init(radius:angle:))) {","  Double.parser()","  \" @ \"","  Double.parser()","  \"°\"","}","","try coord.parse(\"1 @ 90°\")  \/\/ (x: 0, y: 1)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, printing a coordinate will "},{"inlineContent":[{"text":"not","type":"text"}],"type":"emphasis"},{"type":"text","text":" convert it back into a radius and angle, and"},{"type":"text","text":" "},{"type":"text","text":"instead will erroneously use (0, 1) as the radius and angle:"}]},{"code":["try coord.print(.init(x: 0, y: 1))  \/\/ \"0 @ 1°\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means this parser-printer does not round trip (see "},{"type":"text","text":"doc:Roundtripping"},{"type":"text","text":"), "},{"inlineContent":[{"type":"text","text":"i.e."}],"type":"emphasis"},{"type":"text","text":" if we"},{"type":"text","text":" "},{"type":"text","text":"parse and input and then print that output we do not get back the original input we started"},{"type":"text","text":" "},{"type":"text","text":"with:"}]},{"code":["try coord.print(try coord.parse(\"1 @ 90°\")) == \"1 @ 90°\"  \/\/ ❌"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Further, it is possible to provide a custom initializer for a type that either re-orders the","type":"text"},{"text":" ","type":"text"},{"text":"fields or add\/removes fields, both of which will cause the underlying ","type":"text"},{"code":"unsafeBitCast","type":"codeVoice"},{"text":" to","type":"text"},{"text":" ","type":"text"},{"text":"crash. For example, we could have a ","type":"text"},{"code":"User","type":"codeVoice"},{"text":" struct that holds onto a string for the bio and an","type":"text"},{"text":" ","type":"text"},{"text":"integer for the id, and provide a custom initializer so that the id is provided first:","type":"text"}]},{"code":["struct User {","  let bio: String","  let id: Int","  init(id: Int, bio: String) {","    self.bio = bio","    self.id = id","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, using this initializer with "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/memberwise(_:)","isActive":true,"type":"reference"},{"type":"text","text":" will cause printing to crash because"},{"type":"text","text":" "},{"type":"text","text":"it will try to bitcast a "},{"code":"(String, Int)","type":"codeVoice"},{"type":"text","text":" struct into a "},{"code":"(Int, String)","type":"codeVoice"},{"type":"text","text":" tuple:"}]},{"code":["let user = ParsePrint(.memberwise(User.init(id:bio:))) {","  Int.parser()","  \",\"","  Rest()","}","","try user.print(.init(id: 42, bio: \"Hello world!\"))  \/\/ ❌"],"type":"codeListing","syntax":"swift"}]}],"abstract":[{"type":"text","text":"A conversion from a tuple of values into a struct and a struct into a tuple of values, using a"},{"type":"text","text":" "},{"type":"text","text":"memberwise initializer."}],"metadata":{"modules":[{"name":"Parsing"}],"externalID":"s:7Parsing10ConversionPAAE10memberwiseyAA11ConversionsO10MemberwiseVy_qd__qd_0_Gqd_0_qd__cAIRszr0_lFZ","role":"symbol","title":"memberwise(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"memberwise"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Values"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Struct"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Struct"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"roleHeading":"Type Method","extendedModule":"Parsing","symbolKind":"method"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Conversion/case(_:)-4j2n7":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/case(_:)-4j2n7","abstract":[{"text":"Converts the associated values of an enum case into the case, and an enum case into its","type":"text"},{"text":" ","type":"text"},{"text":"associated values.","type":"text"}],"title":"case(_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`case`","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Enum","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Enum","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"type":"topic","url":"\/documentation\/parsing\/conversion\/case(_:)-4j2n7","role":"symbol","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/Memberwise":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/Memberwise","abstract":[],"title":"Conversions.Memberwise","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Memberwise","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"Memberwise","kind":"identifier"}],"url":"\/documentation\/parsing\/conversions\/memberwise","role":"symbol","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","abstract":[],"title":"ParserPrinter","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"url":"\/documentation\/parsing\/parserprinter","role":"symbol","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion/json(_:decoder:encoder:)-swift.type.method":{"abstract":[{"text":"A conversion from ","type":"text"},{"code":"Data","type":"codeVoice"},{"text":" to the given codable type.","type":"text"}],"role":"symbol","title":"json(_:decoder:encoder:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"json"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"decoder"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"JSONDecoder","preciseIdentifier":"s:10Foundation11JSONDecoderC"},{"kind":"text","text":", "},{"kind":"externalParam","text":"encoder"},{"text":": ","kind":"text"},{"text":"JSONEncoder","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation11JSONEncoderC"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/json(_:decoder:encoder:)-swift.type.method","type":"topic","url":"\/documentation\/parsing\/conversion\/json(_:decoder:encoder:)-swift.type.method"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions":{"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","kind":"symbol","title":"Conversions","url":"\/documentation\/parsing\/conversions","abstract":[{"text":"A namespace for types that serve as conversions.","type":"text"}],"navigatorTitle":[{"text":"Conversions","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversions","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion/int-swift.type.property":{"url":"\/documentation\/parsing\/conversion\/int-swift.type.property","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"int"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Conversions","preciseIdentifier":"s:7Parsing11ConversionsO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"BinaryFloatingPointToFixedWidthInteger","preciseIdentifier":"s:7Parsing11ConversionsO38BinaryFloatingPointToFixedWidthIntegerV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Double","preciseIdentifier":"s:Sd"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"A conversion from a "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" to an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."}],"title":"int","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/int-swift.type.property","kind":"symbol","role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Conversions.BinaryFloatingPointToFixedWidthInteger<Double, Int>"},{"type":"text","text":"."}]},"type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion/string-swift.type.property-9owth":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/string-swift.type.property-9owth","role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Conversions.BytesToString<Substring.UTF8View>"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"url":"\/documentation\/parsing\/conversion\/string-swift.type.property-9owth","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"string"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing11ConversionsO","text":"Conversions"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing11ConversionsO13BytesToStringV","text":"BytesToString"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:Ss","text":"Substring"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:Ss8UTF8ViewV","text":"UTF8View"},{"kind":"text","text":">"}],"title":"string","kind":"symbol","abstract":[{"text":"A conversion from ","type":"text"},{"type":"codeVoice","code":"Substring.UTF8View"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"String"},{"text":".","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"role":"collection","title":"Parsing","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","url":"\/documentation\/parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion/double-swift.type.property":{"title":"double","kind":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Conversions.FixedWidthIntegerToBinaryFloatingPoint<Int, Double>"},{"type":"text","text":"."}]},"type":"topic","url":"\/documentation\/parsing\/conversion\/double-swift.type.property","abstract":[{"text":"A conversion from an ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" to a ","type":"text"},{"code":"Double","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"double"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing11ConversionsO","text":"Conversions"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing11ConversionsO38FixedWidthIntegerToBinaryFloatingPointV","text":"FixedWidthIntegerToBinaryFloatingPoint"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sd","text":"Double"},{"kind":"text","text":">"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/double-swift.type.property"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion/memberwise(_:)":{"abstract":[{"text":"A conversion from a tuple of values into a struct and a struct into a tuple of values, using a","type":"text"},{"text":" ","type":"text"},{"text":"memberwise initializer.","type":"text"}],"role":"symbol","title":"memberwise(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"memberwise","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Struct"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Struct"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/memberwise(_:)","type":"topic","url":"\/documentation\/parsing\/conversion\/memberwise(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion/representing(_:)-swift.type.method":{"abstract":[{"text":"A conversion from a given raw representable type’s raw value to itself.","type":"text"}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"representing","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewOutput","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"Self"}],"type":"topic","title":"representing(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/representing(_:)-swift.type.method","url":"\/documentation\/parsing\/conversion\/representing(_:)-swift.type.method","role":"symbol","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion/lossless(_:)-swift.type.method":{"abstract":[{"text":"A conversion from a string to a lossless string-convertible type.","type":"text"}],"kind":"symbol","url":"\/documentation\/parsing\/conversion\/lossless(_:)-swift.type.method","type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/lossless(_:)-swift.type.method","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"lossless","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"NewOutput"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"Self"}],"title":"lossless(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversion/string-swift.type.property-3u2b5":{"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Conversions.SubstringToString"},{"type":"text","text":"."}]},"url":"\/documentation\/parsing\/conversion\/string-swift.type.property-3u2b5","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"string","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Conversions","preciseIdentifier":"s:7Parsing11ConversionsO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubstringToString","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing11ConversionsO17SubstringToStringV"}],"title":"string","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversion\/string-swift.type.property-3u2b5","role":"symbol","type":"topic","abstract":[{"text":"A conversion from ","type":"text"},{"type":"codeVoice","code":"Substring"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"String"},{"text":".","type":"text"}],"kind":"symbol"}}}