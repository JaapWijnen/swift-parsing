{"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`case`","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Enum","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"initializer","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Enum","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"CasePath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A4PathV","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath"},{"text":"<","kind":"text"},{"text":"Enum","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["Linux"]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"An embed function where "},{"code":"Values","type":"codeVoice"},{"type":"text","text":" directly maps to the memory"},{"type":"text","text":" "},{"type":"text","text":"layout of "},{"code":"Enum","type":"codeVoice"},{"type":"text","text":", for example the internal, default initializer that is automatically"},{"type":"text","text":" "},{"type":"text","text":"synthesized for structs."}],"type":"paragraph"}],"name":"embed"}]},{"kind":"content","content":[{"level":2,"text":"Return Value","type":"heading","anchor":"return-value"},{"inlineContent":[{"type":"text","text":"A conversion that can embed the associated values of an enum case into the case,"},{"type":"text","text":" "},{"type":"text","text":"and extract the associated values from the case."}],"type":"paragraph"}]},{"kind":"content","content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Useful for transforming the output of a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter"},{"text":" into an enum:","type":"text"}]},{"code":["enum Expression {","  case add(Int, Int)","  ...","}","","let add = ParsePrint(.case(Expression.add)) {","  Int.parser()","  \"+\"","  Int.parser()","}","try add.parse(\"1+2\")  \/\/ Expression.add(1, 2)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"To transform the output of a ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","isActive":true,"type":"reference"},{"text":" into a struct, see ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/FromLosslessString\/memberwise(_:)","isActive":true,"type":"reference"},{"text":".","type":"text"}]}]}],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/FromLosslessString\/case(_:)-3tsue","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Converts the associated values of an enum case into the case, and an enum case into its"},{"text":" ","type":"text"},{"text":"associated values.","type":"text"}],"kind":"symbol","metadata":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`case`","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Enum","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Enum","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"modules":[{"name":"Parsing"}],"role":"symbol","symbolKind":"method","roleHeading":"Type Method","externalID":"s:7Parsing10ConversionPAAE4casey9CasePaths0D4PathVyqd_0_qd__Gqd_0_qd__cAHRszr0_lFZ::SYNTHESIZED::s:7Parsing11ConversionsO18FromLosslessStringV","title":"case(_:)","extendedModule":"Parsing"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/conversions\/fromlosslessstring\/case(_:)-3tsue"]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/FromLosslessString","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/FromLosslessString\/Conversion-Implementations"]]},"sections":[],"references":{"doc://co.pointfree.Parsing/documentation/CasePaths/CasePath":{"navigatorTitle":[{"kind":"identifier","text":"CasePath"}],"url":"\/documentation\/casepaths\/casepath","abstract":[{"type":"text","text":"A path that supports embedding a value in a root and attempting to extract a rootâ€™s embedded"},{"type":"text","text":" "},{"type":"text","text":"value."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CasePath"}],"kind":"symbol","title":"CasePath","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/CasePath","type":"topic","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/FromLosslessString/Conversion-Implementations":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/FromLosslessString\/Conversion-Implementations","type":"topic","role":"collectionGroup","kind":"article","abstract":[],"url":"\/documentation\/parsing\/conversions\/fromlosslessstring\/conversion-implementations","title":"Conversion Implementations"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions":{"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions","kind":"symbol","title":"Conversions","url":"\/documentation\/parsing\/conversions","abstract":[{"text":"A namespace for types that serve as conversions.","type":"text"}],"navigatorTitle":[{"text":"Conversions","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversions","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/FromLosslessString/case(_:)-3tsue":{"title":"case(_:)","url":"\/documentation\/parsing\/conversions\/fromlosslessstring\/case(_:)-3tsue","kind":"symbol","type":"topic","abstract":[{"text":"Converts the associated values of an enum case into the case, and an enum case into its","type":"text"},{"text":" ","type":"text"},{"text":"associated values.","type":"text"}],"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"`case`"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Values"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Enum"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Enum"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/FromLosslessString\/case(_:)-3tsue"},"doc://co.pointfree.Parsing/documentation/Parsing":{"abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"role":"collection","title":"Parsing","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","url":"\/documentation\/parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserPrinter":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserPrinter","abstract":[],"title":"ParserPrinter","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"url":"\/documentation\/parsing\/parserprinter","role":"symbol","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/FromLosslessString":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/FromLosslessString","navigatorTitle":[{"text":"FromLosslessString","kind":"identifier"}],"type":"topic","role":"symbol","kind":"symbol","abstract":[{"text":"A conversion from a string to a lossless string-convertible type.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FromLosslessString","kind":"identifier"}],"url":"\/documentation\/parsing\/conversions\/fromlosslessstring","title":"Conversions.FromLosslessString"},"doc://co.pointfree.Parsing/documentation/Parsing/Conversions/FromLosslessString/memberwise(_:)":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conversions\/FromLosslessString\/memberwise(_:)","type":"topic","role":"symbol","abstract":[{"text":"A conversion from a tuple of values into a struct and a struct into a tuple of values, using a","type":"text"},{"text":" ","type":"text"},{"text":"memberwise initializer.","type":"text"}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"memberwise","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Struct","kind":"genericParameter"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Struct"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"title":"memberwise(_:)","url":"\/documentation\/parsing\/conversions\/fromlosslessstring\/memberwise(_:)","kind":"symbol"}}}