{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/first\/stream"]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First\/Parser-Implementations"]]},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"stream","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Parsers","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"text":"Stream","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Stream","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO6StreamV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":"> { ","kind":"text"},{"text":"get","kind":"keyword"},{"text":" }","kind":"text"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"text":"Discussion","type":"heading","anchor":"discussion","level":2},{"inlineContent":[{"text":"For example, the following parser can parse an integer followed by a newline from a collection","type":"text"},{"text":" ","type":"text"},{"text":"of UTF8 bytes:","type":"text"}],"type":"paragraph"},{"code":["Parsers.Integer<ArraySlice<UInt8>, Int>()","  .skip(StartsWith(\"\\n\".utf8))"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This parser can be transformed into one that processes an incoming stream of UTF8 bytes:"}]},{"code":["let newlineSeparatedIntegers = Parsers.Integer<ArraySlice<UInt8>, Int>()","  .skip(StartsWith(\"\\n\".utf8))","  .stream"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"And then it can be used on a stream, such as values coming from standard in:","type":"text"}]},{"code":["var stdin = AnyIterator {","  readLine().map { ArraySlice($0.utf8) }","}","","newlineSeparatedIntegers","  .parse(&stdin)"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"abstract":[{"text":"Transforms the receiver parser into one that can parse streams of input.","type":"text"}],"metadata":{"externalID":"s:7Parsing6ParserPAASm5InputRpzrlE6streamAA7ParsersO6StreamVy_xGvp::SYNTHESIZED::s:7Parsing5FirstV","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"stream"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Parsing7ParsersO6StreamV","kind":"typeIdentifier","text":"Stream"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"stream","symbolKind":"property","extendedModule":"Parsing","modules":[{"name":"Parsing"}],"roleHeading":"Instance Property","role":"symbol"},"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First\/stream"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/First/Parser-Implementations":{"role":"collectionGroup","abstract":[],"title":"Parser Implementations","url":"\/documentation\/parsing\/first\/parser-implementations","kind":"article","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First\/Parser-Implementations"},"doc://co.pointfree.Parsing/documentation/Parsing":{"url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","title":"Parsing","kind":"symbol","role":"collection","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/First":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"First","kind":"identifier"}],"url":"\/documentation\/parsing\/first","title":"First","abstract":[{"type":"text","text":"A parser that consumes the first element from a collection."}],"navigatorTitle":[{"text":"First","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First","kind":"symbol","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/First/stream":{"kind":"symbol","url":"\/documentation\/parsing\/first\/stream","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"stream","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Stream","preciseIdentifier":"s:7Parsing7ParsersO6StreamV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","title":"stream","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First\/stream","abstract":[{"text":"Transforms the receiver parser into one that can parse streams of input.","type":"text"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Input"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"type":"text","text":"."}]},"type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Stream":{"abstract":[{"type":"text","text":"A parser that can parse streams of input."}],"title":"Parsers.Stream","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Stream","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Stream","kind":"identifier"}],"type":"topic","role":"symbol","url":"\/documentation\/parsing\/parsers\/stream","navigatorTitle":[{"text":"Stream","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"url":"\/documentation\/parsing\/parsers","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"type":"topic","title":"Parsers","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}]}}}