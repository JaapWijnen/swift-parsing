{"variants":[{"paths":["\/documentation\/parsing\/rest\/stream"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest\/Parser-Implementations"]]},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"stream","kind":"identifier"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Stream","preciseIdentifier":"s:7Parsing7ParsersO6StreamV","text":"Stream","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":"> { ","kind":"text"},{"text":"get","kind":"keyword"},{"text":" }","kind":"text"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"For example, the following parser can parse an integer followed by a newline from a collection"},{"text":" ","type":"text"},{"text":"of UTF8 bytes:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["Parsers.Integer<ArraySlice<UInt8>, Int>()","  .skip(StartsWith(\"\\n\".utf8))"],"type":"codeListing"},{"inlineContent":[{"text":"This parser can be transformed into one that processes an incoming stream of UTF8 bytes:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let newlineSeparatedIntegers = Parsers.Integer<ArraySlice<UInt8>, Int>()","  .skip(StartsWith(\"\\n\".utf8))","  .stream"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"And then it can be used on a stream, such as values coming from standard in:"}],"type":"paragraph"},{"syntax":"swift","code":["var stdin = AnyIterator {","  readLine().map { ArraySlice($0.utf8) }","}","","newlineSeparatedIntegers","  .parse(&stdin)"],"type":"codeListing"}],"kind":"content"}],"abstract":[{"text":"Transforms the receiver parser into one that can parse streams of input.","type":"text"}],"metadata":{"role":"symbol","modules":[{"name":"Parsing"}],"title":"stream","externalID":"s:7Parsing6ParserPAASm5InputRpzrlE6streamAA7ParsersO6StreamVy_xGvp::SYNTHESIZED::s:7Parsing4RestV","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"stream","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO6StreamV","text":"Stream","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"roleHeading":"Instance Property","extendedModule":"Parsing","symbolKind":"property","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Input","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"text":".","type":"text"}]}},"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest\/stream"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"url":"\/documentation\/parsing\/parsers","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"type":"topic","title":"Parsers","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Stream":{"abstract":[{"type":"text","text":"A parser that can parse streams of input."}],"title":"Parsers.Stream","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Stream","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Stream","kind":"identifier"}],"type":"topic","role":"symbol","url":"\/documentation\/parsing\/parsers\/stream","navigatorTitle":[{"text":"Stream","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing":{"url":"\/documentation\/parsing","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","title":"Parsing","kind":"symbol","role":"collection","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/Rest":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Rest"}],"type":"topic","title":"Rest","abstract":[{"type":"text","text":"A parser that consumes everything to the end of the collection and returns it as its output."}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Rest"}],"url":"\/documentation\/parsing\/rest","kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Rest/stream":{"role":"symbol","abstract":[{"text":"Transforms the receiver parser into one that can parse streams of input.","type":"text"}],"title":"stream","type":"topic","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"stream"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Parsing7ParsersO6StreamV","kind":"typeIdentifier","text":"Stream"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest\/stream","url":"\/documentation\/parsing\/rest\/stream","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"type":"text","text":"."}]}},"doc://co.pointfree.Parsing/documentation/Parsing/Rest/Parser-Implementations":{"type":"topic","title":"Parser Implementations","abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest\/Parser-Implementations","kind":"article","url":"\/documentation\/parsing\/rest\/parser-implementations","role":"collectionGroup"}}}